var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import ShopifyBuy from 'shopify-buy';
if (process.server || (process.client && !window.fetch)) {
    require('isomorphic-fetch');
}
export default (ctx, inject) => __awaiter(void 0, void 0, void 0, function* () {
    const config = {
        domain: '<%= options.domain %>',
        storefrontAccessToken: '<%= options.storefrontAccessToken %>',
    };
    const client = ShopifyBuy.buildClient(config);
    // Inject shopify to the context as $shopify
    ctx.$shopify = client;
    inject('shopify', client);
});
